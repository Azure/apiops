name: Run publisher integration tests

on:
  workflow_dispatch:
  push:
    branches:
      - integration-tests

env:
  EXTRACTOR_ARTIFACT_NAME: extractor
  PUBLISHER_ARTIFACT_NAME: publisher

jobs:
  get_extractor:
    name: Create extractor artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x

      - name: Generate executable
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $VerbosePreference = "Continue"
          $InformationPreference = "Continue"

          $sourcePath = Join-Path "${{ github.workspace }}" "tools" "code" "extractor" "extractor.csproj"
          $outputFolderPath = "${{ runner.temp }}"
          & dotnet publish "$sourcePath" --self-contained --runtime "linux-x64" -p:PublishSingleFile=true --output "$outputFolderPath"
          if ($LASTEXITCODE -ne 0) { throw "Generating extractor failed."}

          $exeFilePath = Join-Path "$outputFolderPath" "extractor"
          "EXE_FILE_PATH=$exeFilePath" >> ${{ github.env }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.EXTRACTOR_ARTIFACT_NAME }}
          path: ${{ env.EXE_FILE_PATH }}
          retention-days: 1
  get_publisher:
    name: Create publisher artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x

      - name: Generate executable
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $VerbosePreference = "Continue"
          $InformationPreference = "Continue"

          $sourcePath = Join-Path "${{ github.workspace }}" "tools" "code" "publisher" "publisher.csproj"
          $outputFolderPath = "${{ runner.temp }}"
          & dotnet publish "$sourcePath" --self-contained --runtime "linux-x64" -p:PublishSingleFile=true --output "$outputFolderPath"
          if ($LASTEXITCODE -ne 0) { throw "Generating publisher failed."}

          $exeFilePath = Join-Path "$outputFolderPath" "publisher"
          "EXE_FILE_PATH=$exeFilePath" >> ${{ github.env }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PUBLISHER_ARTIFACT_NAME }}
          path: ${{ env.EXE_FILE_PATH }}
          retention-days: 1
  run_tests:
    name: Run tests
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    needs:
      - get_extractor
      - get_publisher
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ runner.temp }}

      - name: Make files executable
        run: |
          extractorExePath="${{ runner.temp }}/extractor"
          chmod +x "$extractorExePath"
          echo "EXTRACTOR_EXE_PATH=$extractorExePath" >> ${{ github.env }}

          publisherExePath="${{ runner.temp}}/publisher"
          chmod +x "$publisherExePath"
          echo "PUBLISHER_EXE_PATH=$publisherExePath" >> ${{ github.env }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Setup test environment
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = "Stop"
            $VerbosePreference = "Continue"
            $InformationPreference = "Continue"

            $resourceGroup = Get-AzResourceGroup -Name "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}"
            $apimInstanceName = "apiopse0390156"
            $apimInstanceParameters = @{
                "ResourceGroupName" = $resourceGroup.ResourceGroupName
                "Name"              = $apimInstanceName
                "Location"          = $resourceGroup.Location
                "Organization"      = "apiops"
                "AdminEmail"        = "admin@apiops.com"
                "Sku"               = "Consumption"
            }
            $apimInstance = New-AzApiManagement @apimInstanceParameters
            "APIM_INSTANCE_NAME=$apimInstanceName" >> ${{ github.env }}
          azPSVersion: 'latest'

      - name: Run tests
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = "Stop"
            $VerbosePreference = "Continue"
            $InformationPreference = "Continue"
          
            Install-Module -Name Pester -Force -SkipPublisherCheck

            $pesterConfiguration = New-PesterConfiguration
            $pesterConfiguration.Run.Exit = $true

            $pesterContainerParameters = @{
              Path = Join-Path "${{ github.workspace }}" "tools" "tests" "publisher" "Publisher.Tests.ps1"
              Data = @{
                ResourceGroupName = "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}"
                ApiManagementInstanceName = "${{ env.APIM_INSTANCE_NAME }}"
                ExtractorExePath = "${{ env.EXTRACTOR_EXE_PATH }}"
                PublisherExePath = "${{ env.PUBLISHER_EXE_PATH }}"
                TestArtifactsPath = Join-Path "${{ github.workspace }}" "tools" "tests" "artifacts-publisher"
              }
            }
            $pesterContainer = New-PesterContainer @pesterContainerParameters

            Invoke-Pester -Configuration $pesterConfiguration -Container $pesterContainer -Output "Detailed"
          azPSVersion: 'latest'